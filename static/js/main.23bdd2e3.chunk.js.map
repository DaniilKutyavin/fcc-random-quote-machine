{"version":3,"sources":["registerServiceWorker.js","utils.js","components/button/Button.jsx","components/card/Card.jsx","components/loader/Loader.js","components/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","getQuotes","a","async","fetch","response","json","Error","Button","onClick","variant","buttonProps","className","variantMappingClassName","tweet","primary","getClassName","Card","text","author","onNewQuoteClick","ButtonGroup","open","props","Loader","size","style","height","width","wait","duration","Promise","resolve","setTimeout","render","useState","quotes","setQuotes","loading","setLoading","currentQuote","setCurrentQuote","useEffect","all","fetchData","newIndex","Math","floor","random","length","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.23bdd2e3.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const DATA_URL =\n  'https://gist.githubusercontent.com/dkutyavin/0d335200fcbbee1fc5337d164e801c1d/raw/df81dcef68efba9389db4906b07ca559a099cbe3/quotes.json'\n\nexport async function getQuotes() {\n  try {\n    const response = await fetch(DATA_URL)\n    return await response.json()\n  } catch (err) {\n    console.error(err)\n    throw new Error('Cannot get quotes!')\n  }\n}\n","import React from 'react'\nimport './Button.scss'\n\nexport default function Button({ onClick, variant, ...buttonProps }) {\n  const className = getClassName(buttonProps.className, variant)\n  return <button className={className} onClick={onClick} {...buttonProps} />\n}\n\nfunction getClassName(className, variant) {\n  const baseClassName = 'button'\n\n  const variantMapping = {\n    tweet: `${baseClassName}__tweet`,\n    primary: `${baseClassName}__primary`,\n  }\n  const variantMappingClassName = variantMapping[variant] || ''\n\n  return `${baseClassName} ${variantMappingClassName} ${className || ''}`\n}\n\nButton.ButtonGroup = props => <div className=\"button-group\" {...props} />\n","import React from 'react'\n\nimport './Card.scss'\nimport Button from '../button/Button'\n\nexport default function Card({ text, author, onNewQuoteClick }) {\n  const tweetClkHandle = () => {\n    const tweet = `\"${text}\" ${author}`\n    window.open(`https://twitter.com/intent/tweet?text=${tweet}`, '_blank')\n  }\n\n  return (\n    <div className=\"quote-card\">\n      <p className=\"quote-card__text\">\n        &ldquo;\n        {text}\n        &rdquo;\n      </p>\n\n      <span className=\"quote-card__author\">{author}</span>\n\n      <Button.ButtonGroup>\n        <Button variant=\"tweet\" onClick={tweetClkHandle}>\n          Tweet quote\n        </Button>\n        <Button variant=\"primary\" onClick={onNewQuoteClick}>\n          New quote\n        </Button>\n      </Button.ButtonGroup>\n    </div>\n  )\n}\n","import React from 'react'\nimport './Loader.scss'\n\nexport default function Loader({ size }) {\n  return <div className=\"loader\" style={{ height: size, width: size }} />\n}\n","import React, { useEffect, useState } from 'react'\nimport { getQuotes } from '../utils'\nimport Card from './card/Card'\nimport Loader from './loader/Loader'\n\nexport default function App() {\n  const [quotes, setQuotes] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [currentQuote, setCurrentQuote] = useState()\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true)\n\n        const ANIMATION_DURATION = 1200\n        const [quotes] = await Promise.all([getQuotes(), wait(ANIMATION_DURATION)])\n\n        setQuotes(quotes)\n        setCurrentQuote(quotes[0])\n      } catch (err) {\n        console.error(err)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  if (loading) return <Loader size=\"8em\" />\n  if (!currentQuote) return null\n\n  const { text, author } = currentQuote\n\n  const getRandomQuote = () => {\n    const newIndex = Math.floor(Math.random() * (quotes.length - 1))\n    setCurrentQuote(quotes[newIndex])\n  }\n\n  return <Card text={text} author={author} onNewQuoteClick={getRandomQuote} />\n}\n\nconst wait = duration => new Promise(resolve => setTimeout(resolve(), duration))\n","import React from 'react'\nimport { render } from 'react-dom'\nimport registerServiceWorker from './registerServiceWorker'\n\nimport './index.scss'\nimport App from './components/App'\n\nrender(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}